#!/usr/bin/env python
"""
Usage: share [--version] [--help] <command> [<args>...]

Options:
  -h, --help  Show this screen.
  -v, --version  Show version.

Commands:
    harvest      Run a specific harvester
    normalize    Normalize the given files with a specific harvester
    providers    Print a list of installed providers

See 'share <command> --help' for more information on a specific command.
"""
import sys
sys.path.insert(0, '')

import os
import re
import json
from pprint import pprint
from datetime import timedelta

import arrow
from docopt import docopt

import django
from django.apps import apps
from django.conf import settings

from share.normalize import ctx
from share.provider import ProviderAppConfig

__version__ = 'share 0.0.0'


def command(func):
    def inner(argv):
        parsed = docopt(func.__doc__, version=__version__, argv=argv)
        print('Initializing Django...')
        django.setup()
        return func(parsed, argv)
    inner.is_command = True
    return inner


@command
def harvest(args, argv):
    """
    Usage: share harvest <provider> [--limit=LIMIT] [--print | --out=DIR] [--days-back=DAYS] [--start=MM-DD-YYYY] [--end=MM-DD-YY]

    Options:
        -l, --limit=NUMBER    Limit the harvester to NUMBER of documents
        -p, --print           Print results to stdout rather than to a file
        -o, --out=DIR         The directory to store the harvested data in. Defaults to ./<provider>
        -d, --days-back=DAYS  Number of days back to harvest [default: 1]
        -s, --start=MM-DD-YYYY  The start date for the harvester to begin, defaults to one day in the past
        -e, --end=MM-DD-YYYY    The start date for the harvester to end, defaults to today
    """
    config = apps.get_app_config(args['<provider>'])
    harvester = config.harvester(config)

    import ipdb; ipdb.set_trace()

    if not args['--print']:
        args['--out'] = args['--out'] or os.path.join(os.curdir, config.label)
        os.makedirs(args['--out'], exist_ok=True)

    start_date = arrow.get(args['--start']) if args.get('--start') else arrow.utcnow() - timedelta(days=int(args['--days-back']))
    end_date = arrow.get(args['--end']) if args.get('--end') else arrow.utcnow()

    for doc_id, data in harvester.raw(start_date, end_date, limit=int(args['--limit']) if args['--limit'] else None):
        if args['--print']:
            print('Harvested data with identifier "{}"'.format(doc_id))
            print(data.decode())
            print('\n')
        else:
            with open(os.path.join(args['--out'], re.sub(r'[:\\\/\?\*]', '', str(doc_id))) + '.json', 'w') as fobj:
                json.dump({'id': doc_id, 'raw': data.decode()}, fobj, indent=4)


@command
def normalize(args, argv):
    """
    Usage: share normalize <provider> FILE ...
           share normalize <provider> --directory=DIR

    Options:
        -d, --directory=DIR  Normalize all JSON files in DIR

    Normalize all given JSON files. Results will be printed to stdout.
    """
    config = apps.get_app_config(args['<provider>'])
    normalizer = config.normalizer(config)

    if args['FILE']:
        files = [x for x in args['FILE'] if x.endswith('.json')]
    else:
        files = [x for x in os.listdir(args['--directory']) if x.endswith('.json')]

    for name in files:
        with open(name) as fobj:
            data = json.load(fobj)
        from ipdb import launch_ipdb_on_exception
        with launch_ipdb_on_exception():
            print('Parsed raw data "{}" into'.format(data['id']))
            pprint(normalizer.normalize(data['raw'].encode()))
            print('\n')


@command
def providers(args, argv):
    """
    Usage: share providers

    Print out a list of currently installed providers
    """
    for config in apps.get_app_configs():
        if isinstance(config, ProviderAppConfig):
            print(config.label)


@command
def debug(args, argv):
    """
    Usage: share debug <provider> FILE

    """
    config = apps.get_app_config(args['<provider>'])
    normalizer = config.normalizer(config)

    with open(args['FILE']) as fobj:
        data = normalizer.unwrap_data(json.load(fobj)['raw'].encode())

    parser = normalizer.get_root_parser()

    def execute(data, chain):
        return chain.chain()[0].execute(data)
    e = execute  # noqa

    print('\n')
    print('ctx: {}'.format(ctx))
    print('parser: {}'.format(parser))
    print('data: {}'.format(type(data)))
    print('e, execute: {}'.format(execute))
    print('normalizer: {}'.format(normalizer))

    import ipdb
    ipdb.set_trace()


def main():
    args = docopt(__doc__, version=__version__, options_first=True)
    func = globals().get(args['<command>'])
    if not func or not getattr(func, 'is_command', False):
        print('Invalid command "{}"'.format(args['<command>']))
        return 0

    return func([args['<command>']] + args['<args>'])


if __name__ == '__main__':
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
    settings.DATABASES = {}
    main()
