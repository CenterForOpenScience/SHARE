# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-07-08 15:44
from __future__ import unicode_literals

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('share', '0002_create_share_user'),
    ]

    operations = [
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_extradata_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_extradataversion(persistent_id, action, change_id, data, date_created, date_modified, same_as_id, same_as_version_id, uuid) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.data, NEW.date_created, NEW.date_modified, NEW.same_as_id, NEW.same_as_version_id, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_extradata_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_extradata_change ON share_extradata;\n\n        CREATE TRIGGER share_extradata_change\n        BEFORE INSERT OR UPDATE ON share_extradata\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_extradata_change();',
            reverse_sql='DROP TRIGGER share_extradata_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_venue_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_venueversion(persistent_id, action, change_id, community_identifier, date_created, date_modified, extra_id, extra_version_id, location, name, same_as_id, same_as_version_id, uuid, venue_type) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.community_identifier, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.location, NEW.name, NEW.same_as_id, NEW.same_as_version_id, NEW.uuid, NEW.venue_type) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_venue_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_venue_change ON share_venue;\n\n        CREATE TRIGGER share_venue_change\n        BEFORE INSERT OR UPDATE ON share_venue\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_venue_change();',
            reverse_sql='DROP TRIGGER share_venue_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_award_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_awardversion(persistent_id, action, award, change_id, date_created, date_modified, description, extra_id, extra_version_id, same_as_id, same_as_version_id, url, uuid) VALUES (NEW.id, TG_OP, NEW.award, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.description, NEW.extra_id, NEW.extra_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.url, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_award_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_award_change ON share_award;\n\n        CREATE TRIGGER share_award_change\n        BEFORE INSERT OR UPDATE ON share_award\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_award_change();',
            reverse_sql='DROP TRIGGER share_award_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_tag_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_tagversion(persistent_id, action, change_id, date_created, date_modified, extra_id, extra_version_id, name, same_as_id, same_as_version_id, url, uuid) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.name, NEW.same_as_id, NEW.same_as_version_id, NEW.url, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_tag_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_tag_change ON share_tag;\n\n        CREATE TRIGGER share_tag_change\n        BEFORE INSERT OR UPDATE ON share_tag\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_tag_change();',
            reverse_sql='DROP TRIGGER share_tag_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_link_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_linkversion(persistent_id, action, change_id, date_created, date_modified, extra_id, extra_version_id, same_as_id, same_as_version_id, type, url, uuid) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.type, NEW.url, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_link_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_link_change ON share_link;\n\n        CREATE TRIGGER share_link_change\n        BEFORE INSERT OR UPDATE ON share_link\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_link_change();',
            reverse_sql='DROP TRIGGER share_link_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_throughlinks_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_throughlinksversion(persistent_id, action, change_id, creative_work_id, creative_work_version_id, date_created, date_modified, extra_id, extra_version_id, link_id, link_version_id, same_as_id, same_as_version_id, uuid) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.creative_work_id, NEW.creative_work_version_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.link_id, NEW.link_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_throughlinks_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_throughlinks_change ON share_throughlinks;\n\n        CREATE TRIGGER share_throughlinks_change\n        BEFORE INSERT OR UPDATE ON share_throughlinks\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_throughlinks_change();',
            reverse_sql='DROP TRIGGER share_throughlinks_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_throughvenues_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_throughvenuesversion(persistent_id, action, change_id, creative_work_id, creative_work_version_id, date_created, date_modified, extra_id, extra_version_id, same_as_id, same_as_version_id, uuid, venue_id, venue_version_id) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.creative_work_id, NEW.creative_work_version_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.uuid, NEW.venue_id, NEW.venue_version_id) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_throughvenues_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_throughvenues_change ON share_throughvenues;\n\n        CREATE TRIGGER share_throughvenues_change\n        BEFORE INSERT OR UPDATE ON share_throughvenues\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_throughvenues_change();',
            reverse_sql='DROP TRIGGER share_throughvenues_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_throughawards_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_throughawardsversion(persistent_id, action, award_id, award_version_id, change_id, creative_work_id, creative_work_version_id, date_created, date_modified, extra_id, extra_version_id, same_as_id, same_as_version_id, uuid) VALUES (NEW.id, TG_OP, NEW.award_id, NEW.award_version_id, NEW.change_id, NEW.creative_work_id, NEW.creative_work_version_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_throughawards_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_throughawards_change ON share_throughawards;\n\n        CREATE TRIGGER share_throughawards_change\n        BEFORE INSERT OR UPDATE ON share_throughawards\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_throughawards_change();',
            reverse_sql='DROP TRIGGER share_throughawards_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_throughtags_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_throughtagsversion(persistent_id, action, change_id, creative_work_id, creative_work_version_id, date_created, date_modified, extra_id, extra_version_id, same_as_id, same_as_version_id, tag_id, tag_version_id, uuid) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.creative_work_id, NEW.creative_work_version_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.tag_id, NEW.tag_version_id, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_throughtags_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_throughtags_change ON share_throughtags;\n\n        CREATE TRIGGER share_throughtags_change\n        BEFORE INSERT OR UPDATE ON share_throughtags\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_throughtags_change();',
            reverse_sql='DROP TRIGGER share_throughtags_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_email_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_emailversion(persistent_id, action, change_id, date_created, date_modified, email, extra_id, extra_version_id, is_primary, same_as_id, same_as_version_id, uuid) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.email, NEW.extra_id, NEW.extra_version_id, NEW.is_primary, NEW.same_as_id, NEW.same_as_version_id, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_email_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_email_change ON share_email;\n\n        CREATE TRIGGER share_email_change\n        BEFORE INSERT OR UPDATE ON share_email\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_email_change();',
            reverse_sql='DROP TRIGGER share_email_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_identifier_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_identifierversion(persistent_id, action, base_url, change_id, date_created, date_modified, extra_id, extra_version_id, same_as_id, same_as_version_id, url, uuid) VALUES (NEW.id, TG_OP, NEW.base_url, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.url, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_identifier_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_identifier_change ON share_identifier;\n\n        CREATE TRIGGER share_identifier_change\n        BEFORE INSERT OR UPDATE ON share_identifier\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_identifier_change();',
            reverse_sql='DROP TRIGGER share_identifier_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_person_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_personversion(persistent_id, action, additional_name, change_id, date_created, date_modified, extra_id, extra_version_id, family_name, given_name, location, same_as_id, same_as_version_id, suffix, url, uuid) VALUES (NEW.id, TG_OP, NEW.additional_name, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.family_name, NEW.given_name, NEW.location, NEW.same_as_id, NEW.same_as_version_id, NEW.suffix, NEW.url, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_person_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_person_change ON share_person;\n\n        CREATE TRIGGER share_person_change\n        BEFORE INSERT OR UPDATE ON share_person\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_person_change();',
            reverse_sql='DROP TRIGGER share_person_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_throughidentifiers_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_throughidentifiersversion(persistent_id, action, change_id, date_created, date_modified, extra_id, extra_version_id, identifier_id, identifier_version_id, person_id, person_version_id, same_as_id, same_as_version_id, uuid) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.identifier_id, NEW.identifier_version_id, NEW.person_id, NEW.person_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_throughidentifiers_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_throughidentifiers_change ON share_throughidentifiers;\n\n        CREATE TRIGGER share_throughidentifiers_change\n        BEFORE INSERT OR UPDATE ON share_throughidentifiers\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_throughidentifiers_change();',
            reverse_sql='DROP TRIGGER share_throughidentifiers_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_personemail_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_personemailversion(persistent_id, action, change_id, date_created, date_modified, email_id, email_version_id, extra_id, extra_version_id, person_id, person_version_id, same_as_id, same_as_version_id, uuid) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.email_id, NEW.email_version_id, NEW.extra_id, NEW.extra_version_id, NEW.person_id, NEW.person_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_personemail_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_personemail_change ON share_personemail;\n\n        CREATE TRIGGER share_personemail_change\n        BEFORE INSERT OR UPDATE ON share_personemail\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_personemail_change();',
            reverse_sql='DROP TRIGGER share_personemail_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_affiliation_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_affiliationversion(persistent_id, action, change_id, date_created, date_modified, entity_id, entity_version_id, extra_id, extra_version_id, person_id, person_version_id, same_as_id, same_as_version_id, uuid) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.entity_id, NEW.entity_version_id, NEW.extra_id, NEW.extra_version_id, NEW.person_id, NEW.person_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_affiliation_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_affiliation_change ON share_affiliation;\n\n        CREATE TRIGGER share_affiliation_change\n        BEFORE INSERT OR UPDATE ON share_affiliation\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_affiliation_change();',
            reverse_sql='DROP TRIGGER share_affiliation_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_contributor_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_contributorversion(persistent_id, action, change_id, cited_name, creative_work_id, creative_work_version_id, date_created, date_modified, extra_id, extra_version_id, order_cited, person_id, person_version_id, same_as_id, same_as_version_id, uuid) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.cited_name, NEW.creative_work_id, NEW.creative_work_version_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.order_cited, NEW.person_id, NEW.person_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_contributor_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_contributor_change ON share_contributor;\n\n        CREATE TRIGGER share_contributor_change\n        BEFORE INSERT OR UPDATE ON share_contributor\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_contributor_change();',
            reverse_sql='DROP TRIGGER share_contributor_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_entity_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_entityversion(persistent_id, action, change_id, community_identifier, date_created, date_modified, extra_id, extra_version_id, funder_region, isni, location, name, ringgold, same_as_id, same_as_version_id, type, url, uuid) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.community_identifier, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.funder_region, NEW.isni, NEW.location, NEW.name, NEW.ringgold, NEW.same_as_id, NEW.same_as_version_id, NEW.type, NEW.url, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_entity_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_entity_change ON share_entity;\n\n        CREATE TRIGGER share_entity_change\n        BEFORE INSERT OR UPDATE ON share_entity\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_entity_change();',
            reverse_sql='DROP TRIGGER share_entity_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_abstractcreativework_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_abstractcreativeworkversion(persistent_id, action, change_id, date_created, date_modified, date_published, date_updated, description, extra_id, extra_version_id, free_to_read_date, free_to_read_type, language, rights, same_as_id, same_as_version_id, subject_id, subject_version_id, title, type, uuid) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.date_published, NEW.date_updated, NEW.description, NEW.extra_id, NEW.extra_version_id, NEW.free_to_read_date, NEW.free_to_read_type, NEW.language, NEW.rights, NEW.same_as_id, NEW.same_as_version_id, NEW.subject_id, NEW.subject_version_id, NEW.title, NEW.type, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_abstractcreativework_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_abstractcreativework_change ON share_abstractcreativework;\n\n        CREATE TRIGGER share_abstractcreativework_change\n        BEFORE INSERT OR UPDATE ON share_abstractcreativework\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_abstractcreativework_change();',
            reverse_sql='DROP TRIGGER share_abstractcreativework_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_association_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_associationversion(persistent_id, action, change_id, creative_work_id, creative_work_version_id, date_created, date_modified, entity_id, entity_version_id, extra_id, extra_version_id, same_as_id, same_as_version_id, uuid) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.creative_work_id, NEW.creative_work_version_id, NEW.date_created, NEW.date_modified, NEW.entity_id, NEW.entity_version_id, NEW.extra_id, NEW.extra_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.uuid) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_association_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_association_change ON share_association;\n\n        CREATE TRIGGER share_association_change\n        BEFORE INSERT OR UPDATE ON share_association\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_association_change();',
            reverse_sql='DROP TRIGGER share_association_change',
        ),
    ]
