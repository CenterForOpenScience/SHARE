# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-06-14 15:19
from __future__ import unicode_literals

import pendulum
from django.db import migrations, models
import django.db.models.deletion
import share.models.fields
import share.models.jobs


class Migration(migrations.Migration):

    dependencies = [
        ('share', '0046_auto_20170714_1547'),
    ]

    operations = [
        migrations.RenameField(
            model_name='rawdatum',
            old_name='logs',
            new_name='jobs',
        ),
        migrations.RenameModel('HarvestLog', 'HarvestJob'),
        migrations.AlterField(
            model_name='harvestjob',
            name='source_config',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='harvest_jobs', to='share.SourceConfig'),
        ),
        migrations.AlterField(
            model_name='sourceconfig',
            name='full_harvest',
            field=models.BooleanField(default=False, help_text='Whether or not this SourceConfig should be fully harvested. Requires earliest_date to be set. The schedule harvests task will create all jobs necessary if this flag is set. This should never be set to True by default. '),
        ),
        migrations.CreateModel(
            name='IngestJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.UUIDField(null=True)),
                ('status', models.IntegerField(choices=[(0, 'Enqueued'), (1, 'In Progress'), (2, 'Failed'), (3, 'Succeeded'), (4, 'Rescheduled'), (6, 'Forced'), (7, 'Skipped'), (8, 'Retrying'), (9, 'Cancelled')], db_index=True, default=0)),
                ('context', models.TextField(blank=True, default='')),
                ('completions', models.IntegerField(default=0)),
                ('date_started', models.DateTimeField(blank=True, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True)),
                ('share_version', models.TextField(default=share.models.jobs.get_share_version, editable=False)),
                ('source_config_version', models.PositiveIntegerField()),
                ('transformer_version', models.PositiveIntegerField()),
                ('regulator_version', models.PositiveIntegerField()),
                ('transformed_data', share.models.fields.DateTimeAwareJSONField(null=True)),
                ('regulated_data', share.models.fields.DateTimeAwareJSONField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RegulatorLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('node_id', models.TextField(null=True)),
                ('rejected', models.BooleanField()),
                ('ingest_job', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='regulator_logs', to='share.IngestJob')),
            ],
        ),
        migrations.AddField(
            model_name='ingestjob',
            name='raw',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ingest_jobs', to='share.RawDatum'),
        ),
        migrations.AddField(
            model_name='ingestjob',
            name='suid',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ingest_jobs', to='share.SourceUniqueIdentifier'),
        ),
        migrations.AddField(
            model_name='ingestjob',
            name='source_config',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='ingest_jobs', to='share.SourceConfig'),
        ),
        migrations.AlterUniqueTogether(
            name='ingestjob',
            unique_together=set([('raw', 'source_config_version', 'transformer_version', 'regulator_version')]),
        ),

        # Non-null datestamp
        migrations.RunSQL(
            'UPDATE share_rawdatum SET datestamp = date_created WHERE datestamp IS NULL;',
            reverse_sql='UPDATE share_rawdatum SET datestamp = NULL WHERE datestamp = date_created;',
        ),
        migrations.AlterField(
            model_name='rawdatum',
            name='datestamp',
            field=models.DateTimeField(default=pendulum.pendulum.Pendulum.now, help_text='The most relevant datetime that can be extracted from this RawDatum. This may be, but is not limited to, a deletion, modification, publication, or creation datestamp. Ideally, this datetime should be appropriate for determining the chronological order its data will be applied.'),
        ),
    ]
