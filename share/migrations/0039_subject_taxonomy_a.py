# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-06-02 12:55
from __future__ import unicode_literals

import db.deletion
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.urls import reverse
import django.utils.timezone
import share.models.fields
from share.util import IDObfuscator


class Migration(migrations.Migration):

    dependencies = [
        ('share', '0038_trust_system_user'),
    ]

    operations = [
        migrations.CreateModel(
            name='SubjectVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.TextField(max_length=10)),
                ('name', models.TextField()),
                ('is_deleted', models.BooleanField(default=False)),
                ('uri', share.models.fields.ShareURLField(null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
            ],
            options={
                'ordering': ('-date_modified',),
                'abstract': False,
                'db_table': None,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Taxonomy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name='subject',
            name='central_synonym',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='custom_synonyms', to='share.Subject'),
        ),
        migrations.AddField(
            model_name='subject',
            name='date_created',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, help_text='The date of ingress to SHARE.'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='subject',
            name='date_modified',
            field=models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.'),
        ),
        migrations.AddField(
            model_name='subject',
            name='extra',
            field=models.OneToOneField(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData'),
        ),
        migrations.AddField(
            model_name='subject',
            name='extra_version',
            field=models.OneToOneField(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='subject',
            name='is_deleted',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='subject',
            name='same_as',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.Subject'),
        ),
        migrations.AddField(
            model_name='subject',
            name='sources',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='source_subject', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='subject',
            name='uri',
            field=share.models.fields.ShareURLField(null=True, unique=True),
        ),
        migrations.AddField(
            model_name='throughsubjects',
            name='is_deleted',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='throughsubjectsversion',
            name='is_deleted',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='subject',
            name='id',
            field=models.AutoField(primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='subject',
            name='name',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='subject',
            name='parent',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='children', to='share.Subject'),
        ),
        migrations.AlterField(
            model_name='throughsubjects',
            name='subject',
            field=models.ForeignKey(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='work_relations', to='share.Subject'),
        ),
        migrations.AlterField(
            model_name='throughsubjectsversion',
            name='subject',
            field=models.ForeignKey(db_index=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.Subject'),
        ),
        migrations.AddField(
            model_name='subjectversion',
            name='central_synonym',
            field=models.ForeignKey(db_index=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.Subject'),
        ),
        migrations.AddField(
            model_name='subjectversion',
            name='central_synonym_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.SubjectVersion'),
        ),
        migrations.AddField(
            model_name='subjectversion',
            name='change',
            field=models.OneToOneField(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_subjectversion', to='share.Change'),
        ),
        migrations.AddField(
            model_name='subjectversion',
            name='extra',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData'),
        ),
        migrations.AddField(
            model_name='subjectversion',
            name='extra_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='subjectversion',
            name='parent',
            field=models.ForeignKey(db_index=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.Subject'),
        ),
        migrations.AddField(
            model_name='subjectversion',
            name='parent_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.SubjectVersion'),
        ),
        migrations.AddField(
            model_name='subjectversion',
            name='persistent_id',
            field=models.ForeignKey(db_column='persistent_id', on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='versions', to='share.Subject'),
        ),
        migrations.AddField(
            model_name='subjectversion',
            name='same_as',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.Subject'),
        ),
        migrations.AddField(
            model_name='subjectversion',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.SubjectVersion'),
        ),
        migrations.AddField(
            model_name='subjectversion',
            name='taxonomy',
            field=models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='share.Taxonomy'),
        ),
        migrations.AddField(
            model_name='abstractcreativework',
            name='subject_versions',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='_abstractcreativework_subject_versions_+', through='share.ThroughSubjects', to='share.SubjectVersion'),
        ),
        migrations.AddField(
            model_name='abstractcreativeworkversion',
            name='subject_versions',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='_abstractcreativeworkversion_subject_versions_+', through='share.ThroughSubjects', to='share.SubjectVersion'),
        ),
        migrations.AddField(
            model_name='subject',
            name='central_synonym_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.SubjectVersion'),
        ),
        migrations.AddField(
            model_name='subject',
            name='parent_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.SubjectVersion'),
        ),
        migrations.AddField(
            model_name='subject',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.SubjectVersion'),
        ),

        # Temporarily null fields
        migrations.AddField(
            model_name='subject',
            name='change',
            field=models.OneToOneField(null=True, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_subject', to='share.Change'),
        ),
        migrations.AddField(
            model_name='subject',
            name='taxonomy',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='share.Taxonomy'),
        ),
        migrations.AddField(
            model_name='subject',
            name='version',
            field=models.OneToOneField(null=True, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='share_subject_version', to='share.SubjectVersion'),
        ),
        migrations.AddField(
            model_name='throughsubjects',
            name='subject_version',
            field=models.ForeignKey(db_index=False, null=True, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.SubjectVersion'),
        ),
        migrations.AddField(
            model_name='throughsubjectsversion',
            name='subject_version',
            field=models.ForeignKey(db_index=False, null=True, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.SubjectVersion'),
        ),

        # Update triggers
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_subject_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_subjectversion(persistent_id, action, central_synonym_id, central_synonym_version_id, change_id, date_created, date_modified, extra_id, extra_version_id, is_deleted, name, parent_id, parent_version_id, same_as_id, same_as_version_id, taxonomy_id, uri) VALUES (NEW.id, TG_OP, NEW.central_synonym_id, NEW.central_synonym_version_id, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.is_deleted, NEW.name, NEW.parent_id, NEW.parent_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.taxonomy_id, NEW.uri) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_subject_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_subject_change ON share_subject;\n\n        CREATE TRIGGER share_subject_change\n        BEFORE INSERT OR UPDATE ON share_subject\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_subject_change();',
            reverse_sql='DROP TRIGGER share_subject_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_throughsubjects_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_throughsubjectsversion(persistent_id, action, change_id, creative_work_id, creative_work_version_id, date_created, date_modified, extra_id, extra_version_id, is_deleted, same_as_id, same_as_version_id, subject_id, subject_version_id) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.creative_work_id, NEW.creative_work_version_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.is_deleted, NEW.same_as_id, NEW.same_as_version_id, NEW.subject_id, NEW.subject_version_id) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_throughsubjects_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_throughsubjects_change ON share_throughsubjects;\n\n        CREATE TRIGGER share_throughsubjects_change\n        BEFORE INSERT OR UPDATE ON share_throughsubjects\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_throughsubjects_change();',
            reverse_sql='DROP TRIGGER share_throughsubjects_change',
        ),
    ]
