# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2017-02-22 21:13
from __future__ import unicode_literals

import db.deletion
from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import share.models.core
import share.models.fields
import share.models.validators


def create_share_robot_user(apps, schema_editor):
    ShareUser = apps.get_model('share', 'ShareUser')
    try:
        ShareUser.objects.create_robot_user(username=settings.APPLICATION_USERNAME, robot='')
    except AssertionError:
        pass


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    replaces = [
        ('share', '0001_initial'),
        ('share', '0002_initial'),
        ('share', '0003_create_share_user'),
        ('share', '0004_unique_organization_institution_names'),
        ('share', '0005_update_trigger_migrations_20161117_0127'),
        ('share', '0006_auto_20161118_1707'),
        ('share', '0007_auto_20161122_1810'),
        ('share', '0008_auto_20161207_1535'),
        ('share', '0009_auto_20161209_1945'),
        ('share', '0010_auto_20161212_1418_a'),
        ('share', '0010_auto_20161212_1418_b'),
        ('share', '0010_auto_20161212_1418_c'),
        ('share', '0010_auto_20161212_1418_d'),
        ('share', '0010_auto_20161212_1418_e'),
        ('share', '0011_sitebanner'),
        ('share', '0012_auto_20161212_1555'),
        ('share', '0013_auto_20161214_1921'),
        ('share', '0014_auto_20170112_2143'),
        ('share', '0014_auto_20170127_1423'),
        ('share', '0015_auto_20170117_2050'),
        ('share', '0016_auto_20170130_2130'),
        ('share', '0016_merge'),
        ('share', '0017_merge'),
        ('share', '0018_fuzzycount'),
        ('share', '0018_store_favicons'),
        ('share', '0019_merge'),
        ('share', '0020_auto_20170206_2114'),
    ]

    operations = [
        migrations.CreateModel(
            name='ShareUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.TextField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', unique=True, validators=[django.core.validators.MaxLengthValidator(64), django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(64)], verbose_name='first name')),
                ('last_name', models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(64)], verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('gravatar', share.models.fields.ShareURLField(blank=True)),
                ('time_zone', models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('locale', models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_trusted', models.BooleanField(default=False, help_text='Designates whether the user can push directly into the db.', verbose_name='trusted')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('robot', models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(40)])),
                ('long_title', models.TextField(blank=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('home_page', share.models.fields.ShareURLField(blank=True)),
                ('favicon', models.ImageField(blank=True, null=True, storage=share.models.ingest.SourceIconStorage(), upload_to=share.models.ingest.icon_name)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'Share users',
                'verbose_name': 'Share user',
            },
            managers=[
                ('objects', share.models.core.ShareUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AbstractAgent',
            fields=[
                ('type', models.CharField(choices=[('share.agent', 'agent'), ('share.organization', 'organization'), ('share.consortium', 'consortium'), ('share.department', 'department'), ('share.institution', 'institution'), ('share.person', 'person')], db_index=True, max_length=255)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, db_index=True)),
                ('location', models.TextField(blank=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('additional_name', models.TextField(blank=True, null=True)),
                ('suffix', models.TextField(blank=True, null=True)),
                ('family_name', models.TextField(blank=True, null=True)),
                ('given_name', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'share_agent',
            },
        ),
        migrations.CreateModel(
            name='AbstractAgentRelation',
            fields=[
                ('type', models.CharField(choices=[('share.agentrelation', 'agent relation'), ('share.isaffiliatedwith', 'is affiliated with'), ('share.isemployedby', 'is employed by'), ('share.ismemberof', 'is member of')], db_index=True, max_length=255)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
            ],
            options={
                'db_table': 'share_agentrelation',
            },
        ),
        migrations.CreateModel(
            name='AbstractAgentRelationVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('share.agentrelationversion', 'agent relation version'), ('share.isaffiliatedwithversion', 'is affiliated with version'), ('share.isemployedbyversion', 'is employed by version'), ('share.ismemberofversion', 'is member of version')], db_index=True, max_length=255)),
                ('action', models.TextField(max_length=10)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
            ],
            options={
                'db_table': 'share_agentrelationversion',
            },
        ),
        migrations.CreateModel(
            name='AbstractAgentVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('share.agentversion', 'agent version'), ('share.organizationversion', 'organization version'), ('share.consortiumversion', 'consortium version'), ('share.departmentversion', 'department version'), ('share.institutionversion', 'institution version'), ('share.personversion', 'person version')], db_index=True, max_length=255)),
                ('action', models.TextField(max_length=10)),
                ('name', models.TextField(blank=True)),
                ('location', models.TextField(blank=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('additional_name', models.TextField(blank=True, null=True)),
                ('suffix', models.TextField(blank=True, null=True)),
                ('family_name', models.TextField(blank=True, null=True)),
                ('given_name', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'share_agentversion',
            },
        ),
        migrations.CreateModel(
            name='AbstractAgentWorkRelation',
            fields=[
                ('type', models.CharField(choices=[('share.agentworkrelation', 'agent work relation'), ('share.contributor', 'contributor'), ('share.creator', 'creator'), ('share.principalinvestigator', 'principal investigator'), ('share.principalinvestigatorcontact', 'principal investigator contact'), ('share.funder', 'funder'), ('share.host', 'host'), ('share.publisher', 'publisher')], db_index=True, max_length=255)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('cited_as', models.TextField(blank=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('order_cited', models.PositiveIntegerField(null=True)),
                ('agent', models.ForeignKey(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='work_relations', to='share.AbstractAgent')),
                ('agent_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentVersion')),
            ],
            options={
                'db_table': 'share_agentworkrelation',
            },
        ),
        migrations.CreateModel(
            name='AbstractAgentWorkRelationVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('share.agentworkrelationversion', 'agent work relation version'), ('share.contributorversion', 'contributor version'), ('share.creatorversion', 'creator version'), ('share.principalinvestigatorversion', 'principal investigator version'), ('share.principalinvestigatorcontactversion', 'principal investigator contact version'), ('share.funderversion', 'funder version'), ('share.hostversion', 'host version'), ('share.publisherversion', 'publisher version')], db_index=True, max_length=255)),
                ('action', models.TextField(max_length=10)),
                ('cited_as', models.TextField(blank=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('order_cited', models.PositiveIntegerField(null=True)),
                ('agent', models.ForeignKey(db_index=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgent')),
                ('agent_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentVersion')),
            ],
            options={
                'db_table': 'share_agentworkrelationversion',
            },
        ),
        migrations.CreateModel(
            name='AbstractCreativeWork',
            fields=[
                ('type', models.CharField(choices=[('share.creativework', 'creative work'), ('share.dataset', 'data set'), ('share.patent', 'patent'), ('share.poster', 'poster'), ('share.presentation', 'presentation'), ('share.publication', 'publication'), ('share.article', 'article'), ('share.book', 'book'), ('share.conferencepaper', 'conference paper'), ('share.dissertation', 'dissertation'), ('share.preprint', 'preprint'), ('share.project', 'project'), ('share.registration', 'registration'), ('share.report', 'report'), ('share.thesis', 'thesis'), ('share.workingpaper', 'working paper'), ('share.repository', 'repository'), ('share.retraction', 'retraction'), ('share.software', 'software')], db_index=True, max_length=255)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='Determines whether or not this record will be discoverable via search.')),
                ('date_published', models.DateTimeField(null=True)),
                ('date_updated', models.DateTimeField(null=True)),
                ('free_to_read_type', share.models.fields.ShareURLField(blank=True)),
                ('free_to_read_date', models.DateTimeField(null=True)),
                ('rights', models.TextField(blank=True, null=True)),
                ('language', models.TextField(blank=True, help_text='The ISO 3166-1 alpha-2 country code indicating the language of this record.', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('withdrawn', models.NullBooleanField()),
                ('registration_type', models.TextField(blank=True, null=True)),
                ('justification', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'share_creativework',
            },
        ),
        migrations.CreateModel(
            name='AbstractCreativeWorkVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('share.creativeworkversion', 'creative work version'), ('share.datasetversion', 'data set version'), ('share.patentversion', 'patent version'), ('share.posterversion', 'poster version'), ('share.presentationversion', 'presentation version'), ('share.publicationversion', 'publication version'), ('share.articleversion', 'article version'), ('share.bookversion', 'book version'), ('share.conferencepaperversion', 'conference paper version'), ('share.dissertationversion', 'dissertation version'), ('share.preprintversion', 'preprint version'), ('share.projectversion', 'project version'), ('share.registrationversion', 'registration version'), ('share.reportversion', 'report version'), ('share.thesisversion', 'thesis version'), ('share.workingpaperversion', 'working paper version'), ('share.repositoryversion', 'repository version'), ('share.retractionversion', 'retraction version'), ('share.softwareversion', 'software version')], db_index=True, max_length=255)),
                ('action', models.TextField(max_length=10)),
                ('title', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='Determines whether or not this record will be discoverable via search.')),
                ('date_published', models.DateTimeField(null=True)),
                ('date_updated', models.DateTimeField(null=True)),
                ('free_to_read_type', share.models.fields.ShareURLField(blank=True)),
                ('free_to_read_date', models.DateTimeField(null=True)),
                ('rights', models.TextField(blank=True, null=True)),
                ('language', models.TextField(blank=True, help_text='The ISO 3166-1 alpha-2 country code indicating the language of this record.', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('withdrawn', models.NullBooleanField()),
                ('registration_type', models.TextField(blank=True, null=True)),
                ('justification', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'share_creativeworkversion',
            },
        ),
        migrations.CreateModel(
            name='AbstractWorkRelation',
            fields=[
                ('type', models.CharField(choices=[('share.workrelation', 'work relation'), ('share.cites', 'cites'), ('share.compiles', 'compiles'), ('share.corrects', 'corrects'), ('share.discusses', 'discusses'), ('share.disputes', 'disputes'), ('share.documents', 'documents'), ('share.extends', 'extends'), ('share.isderivedfrom', 'is derived from'), ('share.ispartof', 'is part of'), ('share.issupplementto', 'is supplement to'), ('share.references', 'references'), ('share.repliesto', 'replies to'), ('share.retracts', 'retracts'), ('share.reviews', 'reviews')], db_index=True, max_length=255)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
            ],
            options={
                'db_table': 'share_workrelation',
            },
        ),
        migrations.CreateModel(
            name='AbstractWorkRelationVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('share.workrelationversion', 'work relation version'), ('share.citesversion', 'cites version'), ('share.compilesversion', 'compiles version'), ('share.correctsversion', 'corrects version'), ('share.discussesversion', 'discusses version'), ('share.disputesversion', 'disputes version'), ('share.documentsversion', 'documents version'), ('share.extendsversion', 'extends version'), ('share.isderivedfromversion', 'is derived from version'), ('share.ispartofversion', 'is part of version'), ('share.issupplementtoversion', 'is supplement to version'), ('share.referencesversion', 'references version'), ('share.repliestoversion', 'replies to version'), ('share.retractsversion', 'retracts version'), ('share.reviewsversion', 'reviews version')], db_index=True, max_length=255)),
                ('action', models.TextField(max_length=10)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
            ],
            options={
                'db_table': 'share_workrelationversion',
            },
        ),
        migrations.CreateModel(
            name='AgentIdentifier',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uri', share.models.fields.ShareURLField(unique=True)),
                ('host', models.TextField(editable=False)),
                ('scheme', models.TextField(editable=False)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('agent', models.ForeignKey(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='identifiers', to='share.AbstractAgent')),
                ('agent_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentVersion')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgentIdentifierVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.TextField(max_length=10)),
                ('uri', share.models.fields.ShareURLField()),
                ('host', models.TextField(editable=False)),
                ('scheme', models.TextField(editable=False)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('agent', models.ForeignKey(db_index=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgent')),
                ('agent_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentVersion')),
            ],
            options={
                'ordering': ('-date_modified',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('award_amount', models.PositiveIntegerField(blank=True, null=True)),
                ('uri', share.models.fields.ShareURLField(blank=True, null=True, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AwardVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.TextField(max_length=10)),
                ('name', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('award_amount', models.PositiveIntegerField(blank=True, null=True)),
                ('uri', share.models.fields.ShareURLField(blank=True, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
            ],
            options={
                'ordering': ('-date_modified',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CeleryTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('share.celeryprovidertask', 'celery provider task')], db_index=True, max_length=255)),
                ('uuid', models.UUIDField(db_index=True, unique=True)),
                ('name', models.TextField(blank=True, db_index=True)),
                ('args', models.TextField(blank=True)),
                ('kwargs', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('status', models.IntegerField(choices=[(0, 'started'), (1, 'retried'), (2, 'failed'), (3, 'succeeded')])),
                ('app_label', models.TextField(blank=True, db_index=True, null=True)),
                ('app_version', models.TextField(blank=True, db_index=True, null=True)),
                ('provider', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='provider', to=settings.AUTH_USER_MODEL)),
                ('started_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='started_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-timestamp',),
            },
        ),
        migrations.CreateModel(
            name='Change',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change', django.contrib.postgres.fields.jsonb.JSONField()),
                ('node_id', models.TextField()),
                ('type', models.IntegerField(choices=[(0, 'create'), (1, 'merge'), (2, 'update')], editable=False)),
                ('target_id', models.PositiveIntegerField(null=True)),
                ('target_version_id', models.PositiveIntegerField(null=True)),
            ],
            options={
                'ordering': ('pk',),
            },
        ),
        migrations.CreateModel(
            name='ChangeSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(0, 'pending'), (1, 'accepted'), (2, 'rejected')], default=0)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExtraData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', share.models.fields.DateTimeAwareJSONField(default=dict)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('change', models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_extradata', to='share.Change')),
                ('same_as', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraData')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExtraDataVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.TextField(max_length=10)),
                ('data', share.models.fields.DateTimeAwareJSONField(default=dict)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('change', models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_extradataversion', to='share.Change')),
                ('persistent_id', models.ForeignKey(db_column='persistent_id', on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraData')),
                ('same_as', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraData')),
                ('same_as_version', models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion')),
            ],
            options={
                'db_table': None,
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FaviconImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.BinaryField()),
                ('user', models.OneToOneField(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NormalizedData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('data', share.models.fields.DateTimeAwareJSONField(validators=[share.models.validators.JSONLDValidator()])),
            ],
        ),
        migrations.CreateModel(
            name='ProviderRegistration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(0, 'pending'), (1, 'accepted'), (2, 'implemented'), (3, 'rejected')], default=0)),
                ('submitted_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('contact_name', models.TextField(max_length=300)),
                ('contact_email', models.EmailField(max_length=254)),
                ('contact_affiliation', models.TextField(max_length=300)),
                ('direct_source', models.BooleanField(default=False)),
                ('source_name', models.TextField(max_length=300)),
                ('source_description', models.TextField(max_length=1000)),
                ('source_rate_limit', models.TextField(blank=True, default='', max_length=300)),
                ('source_documentation', models.TextField(blank=True, default='', max_length=300)),
                ('source_preferred_metadata_prefix', models.TextField(blank=True, default='', max_length=300)),
                ('source_oai', models.BooleanField(default=False)),
                ('source_base_url', models.URLField(blank=True, default='')),
                ('source_disallowed_sets', models.TextField(blank=True, default='', max_length=300)),
                ('source_additional_info', models.TextField(blank=True, default='', max_length=1000)),
                ('submitted_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='RawData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('app_label', models.TextField(db_index=True)),
                ('provider_doc_id', models.TextField()),
                ('data', models.TextField()),
                ('sha256', models.TextField(validators=[django.core.validators.MaxLengthValidator(64)])),
                ('date_seen', models.DateTimeField(auto_now=True)),
                ('date_harvested', models.DateTimeField(auto_now_add=True)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Raw data',
            },
        ),
        migrations.CreateModel(
            name='SiteBanner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('title', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True)),
                ('color', models.IntegerField(choices=[(0, 'success'), (1, 'info'), (2, 'warning'), (3, 'danger')], default=1)),
                ('icon', models.CharField(blank=True, default='exclamation', max_length=31)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(db_index=True, unique=True)),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='share.Subject')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('change', models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_tag', to='share.Change')),
                ('extra', models.OneToOneField(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData')),
                ('extra_version', models.OneToOneField(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion')),
                ('same_as', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TagVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.TextField(max_length=10)),
                ('name', models.TextField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('change', models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_tagversion', to='share.Change')),
                ('extra', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData')),
                ('extra_version', models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion')),
                ('persistent_id', models.ForeignKey(db_column='persistent_id', on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.Tag')),
                ('same_as', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.Tag')),
                ('same_as_version', models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.TagVersion')),
            ],
            options={
                'ordering': ('-date_modified',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ThroughAwards',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('award', models.ForeignKey(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.Award')),
                ('award_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AwardVersion')),
                ('change', models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_throughawards', to='share.Change')),
                ('extra', models.OneToOneField(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData')),
                ('extra_version', models.OneToOneField(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion')),
                ('funder', models.ForeignKey(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.AbstractAgentWorkRelation')),
                ('funder_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentWorkRelationVersion')),
                ('same_as', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughAwards')),
            ],
            options={
                'verbose_name_plural': 'through awards',
            },
        ),
        migrations.CreateModel(
            name='ThroughAwardsVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.TextField(max_length=10)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('award', models.ForeignKey(db_index=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.Award')),
                ('award_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AwardVersion')),
                ('change', models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_throughawardsversion', to='share.Change')),
                ('extra', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData')),
                ('extra_version', models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion')),
                ('funder', models.ForeignKey(db_index=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentWorkRelation')),
                ('funder_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentWorkRelationVersion')),
                ('persistent_id', models.ForeignKey(db_column='persistent_id', on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughAwards')),
                ('same_as', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughAwards')),
                ('same_as_version', models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughAwardsVersion')),
            ],
            options={
                'verbose_name_plural': 'through awards',
                'db_table': None,
            },
        ),
        migrations.CreateModel(
            name='ThroughContributor',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('change', models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_throughcontributor', to='share.Change')),
                ('extra', models.OneToOneField(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData')),
                ('extra_version', models.OneToOneField(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion')),
                ('related', models.ForeignKey(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentWorkRelation')),
                ('related_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentWorkRelationVersion')),
                ('same_as', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughContributor')),
            ],
        ),
        migrations.CreateModel(
            name='ThroughContributorVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.TextField(max_length=10)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('change', models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_throughcontributorversion', to='share.Change')),
                ('extra', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData')),
                ('extra_version', models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion')),
                ('persistent_id', models.ForeignKey(db_column='persistent_id', on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughContributor')),
                ('related', models.ForeignKey(db_index=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentWorkRelation')),
                ('related_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentWorkRelationVersion')),
                ('same_as', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughContributor')),
                ('same_as_version', models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughContributorVersion')),
                ('subject', models.ForeignKey(db_index=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentWorkRelation')),
                ('subject_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentWorkRelationVersion')),
            ],
            options={
                'db_table': None,
            },
        ),
        migrations.CreateModel(
            name='ThroughSubjects',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('change', models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_throughsubjects', to='share.Change')),
                ('creative_work', models.ForeignKey(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='subject_relations', to='share.AbstractCreativeWork')),
                ('creative_work_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWorkVersion')),
                ('extra', models.OneToOneField(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData')),
                ('extra_version', models.OneToOneField(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion')),
                ('same_as', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughSubjects')),
            ],
            options={
                'verbose_name_plural': 'through subjects',
            },
        ),
        migrations.CreateModel(
            name='ThroughSubjectsVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.TextField(max_length=10)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('change', models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_throughsubjectsversion', to='share.Change')),
                ('creative_work', models.ForeignKey(db_index=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWork')),
                ('creative_work_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWorkVersion')),
                ('extra', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData')),
                ('extra_version', models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion')),
                ('persistent_id', models.ForeignKey(db_column='persistent_id', on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughSubjects')),
                ('same_as', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughSubjects')),
                ('same_as_version', models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughSubjectsVersion')),
                ('subject', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='share.Subject')),
            ],
            options={
                'verbose_name_plural': 'through subjects',
                'db_table': None,
            },
        ),
        migrations.CreateModel(
            name='ThroughTags',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('change', models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_throughtags', to='share.Change')),
                ('creative_work', models.ForeignKey(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='tag_relations', to='share.AbstractCreativeWork')),
                ('creative_work_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWorkVersion')),
                ('extra', models.OneToOneField(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData')),
                ('extra_version', models.OneToOneField(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion')),
                ('same_as', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughTags')),
            ],
            options={
                'verbose_name_plural': 'through tags',
            },
        ),
        migrations.CreateModel(
            name='ThroughTagsVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.TextField(max_length=10)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('change', models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_throughtagsversion', to='share.Change')),
                ('creative_work', models.ForeignKey(db_index=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWork')),
                ('creative_work_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWorkVersion')),
                ('extra', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData')),
                ('extra_version', models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion')),
                ('persistent_id', models.ForeignKey(db_column='persistent_id', on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughTags')),
                ('same_as', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughTags')),
                ('same_as_version', models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughTagsVersion')),
                ('tag', models.ForeignKey(db_index=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.Tag')),
                ('tag_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.TagVersion')),
            ],
            options={
                'verbose_name_plural': 'through tags',
                'db_table': None,
            },
        ),
        migrations.CreateModel(
            name='WorkIdentifier',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uri', share.models.fields.ShareURLField(unique=True)),
                ('host', models.TextField(editable=False)),
                ('scheme', models.TextField(editable=False, help_text='A prefix to URI indicating how the following data should be interpreted.')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('change', models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_workidentifier', to='share.Change')),
                ('creative_work', models.ForeignKey(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='identifiers', to='share.AbstractCreativeWork')),
                ('creative_work_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWorkVersion')),
                ('extra', models.OneToOneField(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData')),
                ('extra_version', models.OneToOneField(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion')),
                ('same_as', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.WorkIdentifier')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorkIdentifierVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.TextField(max_length=10)),
                ('uri', share.models.fields.ShareURLField()),
                ('host', models.TextField(editable=False)),
                ('scheme', models.TextField(editable=False, help_text='A prefix to URI indicating how the following data should be interpreted.')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The date of ingress to SHARE.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The date this record was modified by SHARE.')),
                ('change', models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_workidentifierversion', to='share.Change')),
                ('creative_work', models.ForeignKey(db_index=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWork')),
                ('creative_work_version', models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWorkVersion')),
                ('extra', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData')),
                ('extra_version', models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion')),
                ('persistent_id', models.ForeignKey(db_column='persistent_id', on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.WorkIdentifier')),
                ('same_as', models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.WorkIdentifier')),
                ('same_as_version', models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.WorkIdentifierVersion')),
            ],
            options={
                'ordering': ('-date_modified',),
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='workidentifier',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.WorkIdentifierVersion'),
        ),
        migrations.AddField(
            model_name='workidentifier',
            name='sources',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='source_workidentifier', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='workidentifier',
            name='version',
            field=models.OneToOneField(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='share_workidentifier_version', to='share.WorkIdentifierVersion'),
        ),
        migrations.AddField(
            model_name='throughtags',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughTagsVersion'),
        ),
        migrations.AddField(
            model_name='throughtags',
            name='sources',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='source_throughtags', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='throughtags',
            name='tag',
            field=models.ForeignKey(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='work_relations', to='share.Tag'),
        ),
        migrations.AddField(
            model_name='throughtags',
            name='tag_version',
            field=models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.TagVersion'),
        ),
        migrations.AddField(
            model_name='throughtags',
            name='version',
            field=models.OneToOneField(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='share_throughtags_version', to='share.ThroughTagsVersion'),
        ),
        migrations.AddField(
            model_name='throughsubjects',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughSubjectsVersion'),
        ),
        migrations.AddField(
            model_name='throughsubjects',
            name='sources',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='source_throughsubjects', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='throughsubjects',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_relations', to='share.Subject'),
        ),
        migrations.AddField(
            model_name='throughsubjects',
            name='version',
            field=models.OneToOneField(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='share_throughsubjects_version', to='share.ThroughSubjectsVersion'),
        ),
        migrations.AddField(
            model_name='throughcontributor',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughContributorVersion'),
        ),
        migrations.AddField(
            model_name='throughcontributor',
            name='sources',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='source_throughcontributor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='throughcontributor',
            name='subject',
            field=models.ForeignKey(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentWorkRelation'),
        ),
        migrations.AddField(
            model_name='throughcontributor',
            name='subject_version',
            field=models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentWorkRelationVersion'),
        ),
        migrations.AddField(
            model_name='throughcontributor',
            name='version',
            field=models.OneToOneField(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='share_throughcontributor_version', to='share.ThroughContributorVersion'),
        ),
        migrations.AddField(
            model_name='throughawards',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ThroughAwardsVersion'),
        ),
        migrations.AddField(
            model_name='throughawards',
            name='sources',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='source_throughawards', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='throughawards',
            name='version',
            field=models.OneToOneField(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='share_throughawards_version', to='share.ThroughAwardsVersion'),
        ),
        migrations.AddField(
            model_name='tag',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.TagVersion'),
        ),
        migrations.AddField(
            model_name='tag',
            name='sources',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='source_tag', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='tag',
            name='version',
            field=models.OneToOneField(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='share_tag_version', to='share.TagVersion'),
        ),
        migrations.AddField(
            model_name='normalizeddata',
            name='raw',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='share.RawData'),
        ),
        migrations.AddField(
            model_name='normalizeddata',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='extradata',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='extradata',
            name='sources',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='source_extradata', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='extradata',
            name='version',
            field=models.OneToOneField(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='share_extradata_version', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='changeset',
            name='normalized_data',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='share.NormalizedData'),
        ),
        migrations.AddField(
            model_name='change',
            name='change_set',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='changes', to='share.ChangeSet'),
        ),
        migrations.AddField(
            model_name='change',
            name='model_type',
            field=models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='change',
            name='target_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_change', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='change',
            name='target_version_type',
            field=models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='target_version_change', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='awardversion',
            name='change',
            field=models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_awardversion', to='share.Change'),
        ),
        migrations.AddField(
            model_name='awardversion',
            name='extra',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData'),
        ),
        migrations.AddField(
            model_name='awardversion',
            name='extra_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='awardversion',
            name='persistent_id',
            field=models.ForeignKey(db_column='persistent_id', on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.Award'),
        ),
        migrations.AddField(
            model_name='awardversion',
            name='same_as',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.Award'),
        ),
        migrations.AddField(
            model_name='awardversion',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AwardVersion'),
        ),
        migrations.AddField(
            model_name='award',
            name='change',
            field=models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_award', to='share.Change'),
        ),
        migrations.AddField(
            model_name='award',
            name='extra',
            field=models.OneToOneField(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData'),
        ),
        migrations.AddField(
            model_name='award',
            name='extra_version',
            field=models.OneToOneField(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='award',
            name='same_as',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.Award'),
        ),
        migrations.AddField(
            model_name='award',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AwardVersion'),
        ),
        migrations.AddField(
            model_name='award',
            name='sources',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='source_award', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='award',
            name='version',
            field=models.OneToOneField(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='share_award_version', to='share.AwardVersion'),
        ),
        migrations.AddField(
            model_name='agentidentifierversion',
            name='change',
            field=models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_agentidentifierversion', to='share.Change'),
        ),
        migrations.AddField(
            model_name='agentidentifierversion',
            name='extra',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData'),
        ),
        migrations.AddField(
            model_name='agentidentifierversion',
            name='extra_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='agentidentifierversion',
            name='persistent_id',
            field=models.ForeignKey(db_column='persistent_id', on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AgentIdentifier'),
        ),
        migrations.AddField(
            model_name='agentidentifierversion',
            name='same_as',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AgentIdentifier'),
        ),
        migrations.AddField(
            model_name='agentidentifierversion',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AgentIdentifierVersion'),
        ),
        migrations.AddField(
            model_name='agentidentifier',
            name='change',
            field=models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_agentidentifier', to='share.Change'),
        ),
        migrations.AddField(
            model_name='agentidentifier',
            name='extra',
            field=models.OneToOneField(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData'),
        ),
        migrations.AddField(
            model_name='agentidentifier',
            name='extra_version',
            field=models.OneToOneField(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='agentidentifier',
            name='same_as',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AgentIdentifier'),
        ),
        migrations.AddField(
            model_name='agentidentifier',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AgentIdentifierVersion'),
        ),
        migrations.AddField(
            model_name='agentidentifier',
            name='sources',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='source_agentidentifier', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='agentidentifier',
            name='version',
            field=models.OneToOneField(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='share_agentidentifier_version', to='share.AgentIdentifierVersion'),
        ),
        migrations.AddField(
            model_name='abstractworkrelationversion',
            name='change',
            field=models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_abstractworkrelationversion', to='share.Change'),
        ),
        migrations.AddField(
            model_name='abstractworkrelationversion',
            name='extra',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData'),
        ),
        migrations.AddField(
            model_name='abstractworkrelationversion',
            name='extra_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='abstractworkrelationversion',
            name='persistent_id',
            field=models.ForeignKey(db_column='persistent_id', on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractWorkRelation'),
        ),
        migrations.AddField(
            model_name='abstractworkrelationversion',
            name='related',
            field=models.ForeignKey(db_index=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWork'),
        ),
        migrations.AddField(
            model_name='abstractworkrelationversion',
            name='related_version',
            field=models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWorkVersion'),
        ),
        migrations.AddField(
            model_name='abstractworkrelationversion',
            name='same_as',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractWorkRelation'),
        ),
        migrations.AddField(
            model_name='abstractworkrelationversion',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractWorkRelationVersion'),
        ),
        migrations.AddField(
            model_name='abstractworkrelationversion',
            name='subject',
            field=models.ForeignKey(db_index=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWork'),
        ),
        migrations.AddField(
            model_name='abstractworkrelationversion',
            name='subject_version',
            field=models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWorkVersion'),
        ),
        migrations.AddField(
            model_name='abstractworkrelation',
            name='change',
            field=models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_abstractworkrelation', to='share.Change'),
        ),
        migrations.AddField(
            model_name='abstractworkrelation',
            name='extra',
            field=models.OneToOneField(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData'),
        ),
        migrations.AddField(
            model_name='abstractworkrelation',
            name='extra_version',
            field=models.OneToOneField(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='abstractworkrelation',
            name='related',
            field=models.ForeignKey(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='incoming_creative_work_relations', to='share.AbstractCreativeWork'),
        ),
        migrations.AddField(
            model_name='abstractworkrelation',
            name='related_version',
            field=models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWorkVersion'),
        ),
        migrations.AddField(
            model_name='abstractworkrelation',
            name='same_as',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractWorkRelation'),
        ),
        migrations.AddField(
            model_name='abstractworkrelation',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractWorkRelationVersion'),
        ),
        migrations.AddField(
            model_name='abstractworkrelation',
            name='sources',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='source_abstractworkrelation', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='abstractworkrelation',
            name='subject',
            field=models.ForeignKey(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='outgoing_creative_work_relations', to='share.AbstractCreativeWork'),
        ),
        migrations.AddField(
            model_name='abstractworkrelation',
            name='subject_version',
            field=models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWorkVersion'),
        ),
        migrations.AddField(
            model_name='abstractworkrelation',
            name='version',
            field=models.OneToOneField(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='share_abstractworkrelation_version', to='share.AbstractWorkRelationVersion'),
        ),
        migrations.AddField(
            model_name='abstractcreativeworkversion',
            name='change',
            field=models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_abstractcreativeworkversion', to='share.Change'),
        ),
        migrations.AddField(
            model_name='abstractcreativeworkversion',
            name='extra',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData'),
        ),
        migrations.AddField(
            model_name='abstractcreativeworkversion',
            name='extra_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='abstractcreativeworkversion',
            name='persistent_id',
            field=models.ForeignKey(db_column='persistent_id', on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWork'),
        ),
        migrations.AddField(
            model_name='abstractcreativeworkversion',
            name='related_agent_versions',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='_abstractcreativeworkversion_related_agent_versions_+', through='share.AbstractAgentWorkRelation', to='share.AbstractAgentVersion'),
        ),
        migrations.AddField(
            model_name='abstractcreativeworkversion',
            name='related_agents',
            field=share.models.fields.TypedManyToManyField(related_name='_abstractcreativeworkversion_related_agents_+', through='share.AbstractAgentWorkRelation', to='share.AbstractAgent'),
        ),
        migrations.AddField(
            model_name='abstractcreativeworkversion',
            name='related_work_versions',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='_abstractcreativeworkversion_related_work_versions_+', through='share.AbstractWorkRelation', to='share.AbstractCreativeWorkVersion'),
        ),
        migrations.AddField(
            model_name='abstractcreativeworkversion',
            name='related_works',
            field=share.models.fields.TypedManyToManyField(related_name='_abstractcreativeworkversion_related_works_+', through='share.AbstractWorkRelation', to='share.AbstractCreativeWork'),
        ),
        migrations.AddField(
            model_name='abstractcreativeworkversion',
            name='same_as',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWork'),
        ),
        migrations.AddField(
            model_name='abstractcreativeworkversion',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWorkVersion'),
        ),
        migrations.AddField(
            model_name='abstractcreativeworkversion',
            name='subjects',
            field=share.models.fields.TypedManyToManyField(related_name='_abstractcreativeworkversion_subjects_+', through='share.ThroughSubjects', to='share.Subject'),
        ),
        migrations.AddField(
            model_name='abstractcreativeworkversion',
            name='tag_versions',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='_abstractcreativeworkversion_tag_versions_+', through='share.ThroughTags', to='share.TagVersion'),
        ),
        migrations.AddField(
            model_name='abstractcreativeworkversion',
            name='tags',
            field=share.models.fields.TypedManyToManyField(related_name='_abstractcreativeworkversion_tags_+', through='share.ThroughTags', to='share.Tag'),
        ),
        migrations.AddField(
            model_name='abstractcreativework',
            name='change',
            field=models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_abstractcreativework', to='share.Change'),
        ),
        migrations.AddField(
            model_name='abstractcreativework',
            name='extra',
            field=models.OneToOneField(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData'),
        ),
        migrations.AddField(
            model_name='abstractcreativework',
            name='extra_version',
            field=models.OneToOneField(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='abstractcreativework',
            name='related_agent_versions',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='_abstractcreativework_related_agent_versions_+', through='share.AbstractAgentWorkRelation', to='share.AbstractAgentVersion'),
        ),
        migrations.AddField(
            model_name='abstractcreativework',
            name='related_agents',
            field=share.models.fields.TypedManyToManyField(through='share.AbstractAgentWorkRelation', to='share.AbstractAgent'),
        ),
        migrations.AddField(
            model_name='abstractcreativework',
            name='related_work_versions',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='_abstractcreativework_related_work_versions_+', through='share.AbstractWorkRelation', to='share.AbstractCreativeWorkVersion'),
        ),
        migrations.AddField(
            model_name='abstractcreativework',
            name='related_works',
            field=share.models.fields.TypedManyToManyField(through='share.AbstractWorkRelation', to='share.AbstractCreativeWork'),
        ),
        migrations.AddField(
            model_name='abstractcreativework',
            name='same_as',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWork'),
        ),
        migrations.AddField(
            model_name='abstractcreativework',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWorkVersion'),
        ),
        migrations.AddField(
            model_name='abstractcreativework',
            name='sources',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='source_abstractcreativework', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='abstractcreativework',
            name='subjects',
            field=share.models.fields.TypedManyToManyField(related_name='subjected_works', through='share.ThroughSubjects', to='share.Subject'),
        ),
        migrations.AddField(
            model_name='abstractcreativework',
            name='tag_versions',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='_abstractcreativework_tag_versions_+', through='share.ThroughTags', to='share.TagVersion'),
        ),
        migrations.AddField(
            model_name='abstractcreativework',
            name='tags',
            field=share.models.fields.TypedManyToManyField(related_name='tagged_works', through='share.ThroughTags', to='share.Tag'),
        ),
        migrations.AddField(
            model_name='abstractcreativework',
            name='version',
            field=models.OneToOneField(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='share_abstractcreativework_version', to='share.AbstractCreativeWorkVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelationversion',
            name='award_versions',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='_abstractagentworkrelationversion_award_versions_+', through='share.ThroughAwards', to='share.AwardVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelationversion',
            name='awards',
            field=share.models.fields.TypedManyToManyField(through='share.ThroughAwards', to='share.Award'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelationversion',
            name='change',
            field=models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_abstractagentworkrelationversion', to='share.Change'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelationversion',
            name='contributed_through',
            field=share.models.fields.TypedManyToManyField(through='share.ThroughContributor', to='share.AbstractAgentWorkRelation'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelationversion',
            name='contributed_through_versions',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='_abstractagentworkrelationversion_contributed_through_versions_+', through='share.ThroughContributor', to='share.AbstractAgentWorkRelationVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelationversion',
            name='creative_work',
            field=models.ForeignKey(db_index=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWork'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelationversion',
            name='creative_work_version',
            field=models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWorkVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelationversion',
            name='extra',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelationversion',
            name='extra_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelationversion',
            name='persistent_id',
            field=models.ForeignKey(db_column='persistent_id', on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentWorkRelation'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelationversion',
            name='same_as',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentWorkRelation'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelationversion',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentWorkRelationVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelation',
            name='award_versions',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='_abstractagentworkrelation_award_versions_+', through='share.ThroughAwards', to='share.AwardVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelation',
            name='awards',
            field=share.models.fields.TypedManyToManyField(through='share.ThroughAwards', to='share.Award'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelation',
            name='change',
            field=models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_abstractagentworkrelation', to='share.Change'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelation',
            name='contributed_through',
            field=share.models.fields.TypedManyToManyField(through='share.ThroughContributor', to='share.AbstractAgentWorkRelation'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelation',
            name='contributed_through_versions',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='_abstractagentworkrelation_contributed_through_versions_+', through='share.ThroughContributor', to='share.AbstractAgentWorkRelationVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelation',
            name='creative_work',
            field=models.ForeignKey(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='agent_relations', to='share.AbstractCreativeWork'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelation',
            name='creative_work_version',
            field=models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractCreativeWorkVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelation',
            name='extra',
            field=models.OneToOneField(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelation',
            name='extra_version',
            field=models.OneToOneField(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelation',
            name='same_as',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentWorkRelation'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelation',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentWorkRelationVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelation',
            name='sources',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='source_abstractagentworkrelation', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='abstractagentworkrelation',
            name='version',
            field=models.OneToOneField(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='share_abstractagentworkrelation_version', to='share.AbstractAgentWorkRelationVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentversion',
            name='change',
            field=models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_abstractagentversion', to='share.Change'),
        ),
        migrations.AddField(
            model_name='abstractagentversion',
            name='extra',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData'),
        ),
        migrations.AddField(
            model_name='abstractagentversion',
            name='extra_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentversion',
            name='persistent_id',
            field=models.ForeignKey(db_column='persistent_id', on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgent'),
        ),
        migrations.AddField(
            model_name='abstractagentversion',
            name='related_agent_versions',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='_abstractagentversion_related_agent_versions_+', through='share.AbstractAgentRelation', to='share.AbstractAgentVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentversion',
            name='related_agents',
            field=share.models.fields.TypedManyToManyField(related_name='_abstractagentversion_related_agents_+', through='share.AbstractAgentRelation', to='share.AbstractAgent'),
        ),
        migrations.AddField(
            model_name='abstractagentversion',
            name='related_work_versions',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='_abstractagentversion_related_work_versions_+', through='share.AbstractAgentWorkRelation', to='share.AbstractCreativeWorkVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentversion',
            name='related_works',
            field=share.models.fields.TypedManyToManyField(related_name='_abstractagentversion_related_works_+', through='share.AbstractAgentWorkRelation', to='share.AbstractCreativeWork'),
        ),
        migrations.AddField(
            model_name='abstractagentversion',
            name='same_as',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgent'),
        ),
        migrations.AddField(
            model_name='abstractagentversion',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentrelationversion',
            name='change',
            field=models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_abstractagentrelationversion', to='share.Change'),
        ),
        migrations.AddField(
            model_name='abstractagentrelationversion',
            name='extra',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData'),
        ),
        migrations.AddField(
            model_name='abstractagentrelationversion',
            name='extra_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentrelationversion',
            name='persistent_id',
            field=models.ForeignKey(db_column='persistent_id', on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentRelation'),
        ),
        migrations.AddField(
            model_name='abstractagentrelationversion',
            name='related',
            field=models.ForeignKey(db_index=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgent'),
        ),
        migrations.AddField(
            model_name='abstractagentrelationversion',
            name='related_version',
            field=models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentrelationversion',
            name='same_as',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentRelation'),
        ),
        migrations.AddField(
            model_name='abstractagentrelationversion',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentRelationVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentrelationversion',
            name='subject',
            field=models.ForeignKey(db_index=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgent'),
        ),
        migrations.AddField(
            model_name='abstractagentrelationversion',
            name='subject_version',
            field=models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentrelation',
            name='change',
            field=models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_abstractagentrelation', to='share.Change'),
        ),
        migrations.AddField(
            model_name='abstractagentrelation',
            name='extra',
            field=models.OneToOneField(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData'),
        ),
        migrations.AddField(
            model_name='abstractagentrelation',
            name='extra_version',
            field=models.OneToOneField(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentrelation',
            name='related',
            field=models.ForeignKey(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='incoming_agent_relations', to='share.AbstractAgent'),
        ),
        migrations.AddField(
            model_name='abstractagentrelation',
            name='related_version',
            field=models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentrelation',
            name='same_as',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentRelation'),
        ),
        migrations.AddField(
            model_name='abstractagentrelation',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentRelationVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentrelation',
            name='sources',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='source_abstractagentrelation', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='abstractagentrelation',
            name='subject',
            field=models.ForeignKey(on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='outgoing_agent_relations', to='share.AbstractAgent'),
        ),
        migrations.AddField(
            model_name='abstractagentrelation',
            name='subject_version',
            field=models.ForeignKey(db_index=False, editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentVersion'),
        ),
        migrations.AddField(
            model_name='abstractagentrelation',
            name='version',
            field=models.OneToOneField(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='share_abstractagentrelation_version', to='share.AbstractAgentRelationVersion'),
        ),
        migrations.AddField(
            model_name='abstractagent',
            name='change',
            field=models.ForeignKey(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='affected_abstractagent', to='share.Change'),
        ),
        migrations.AddField(
            model_name='abstractagent',
            name='extra',
            field=models.OneToOneField(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), to='share.ExtraData'),
        ),
        migrations.AddField(
            model_name='abstractagent',
            name='extra_version',
            field=models.OneToOneField(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.ExtraDataVersion'),
        ),
        migrations.AddField(
            model_name='abstractagent',
            name='related_agent_versions',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='_abstractagent_related_agent_versions_+', through='share.AbstractAgentRelation', to='share.AbstractAgentVersion'),
        ),
        migrations.AddField(
            model_name='abstractagent',
            name='related_agents',
            field=share.models.fields.TypedManyToManyField(through='share.AbstractAgentRelation', to='share.AbstractAgent'),
        ),
        migrations.AddField(
            model_name='abstractagent',
            name='related_work_versions',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='_abstractagent_related_work_versions_+', through='share.AbstractAgentWorkRelation', to='share.AbstractCreativeWorkVersion'),
        ),
        migrations.AddField(
            model_name='abstractagent',
            name='related_works',
            field=share.models.fields.TypedManyToManyField(through='share.AbstractAgentWorkRelation', to='share.AbstractCreativeWork'),
        ),
        migrations.AddField(
            model_name='abstractagent',
            name='same_as',
            field=models.ForeignKey(null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgent'),
        ),
        migrations.AddField(
            model_name='abstractagent',
            name='same_as_version',
            field=models.ForeignKey(db_index=False, editable=False, null=True, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='+', to='share.AbstractAgentVersion'),
        ),
        migrations.AddField(
            model_name='abstractagent',
            name='sources',
            field=share.models.fields.TypedManyToManyField(editable=False, related_name='source_abstractagent', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='abstractagent',
            name='version',
            field=models.OneToOneField(editable=False, on_delete=db.deletion.DatabaseOnDelete(clause='CASCADE'), related_name='share_abstractagent_version', to='share.AbstractAgentVersion'),
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.abstractagent',),
        ),
        migrations.CreateModel(
            name='AgentRelation',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.abstractagentrelation',),
        ),
        migrations.CreateModel(
            name='AgentRelationVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.abstractagentrelationversion',),
        ),
        migrations.CreateModel(
            name='AgentVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.abstractagentversion',),
        ),
        migrations.CreateModel(
            name='AgentWorkRelation',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.abstractagentworkrelation',),
        ),
        migrations.CreateModel(
            name='AgentWorkRelationVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.abstractagentworkrelationversion',),
        ),
        migrations.CreateModel(
            name='CeleryProviderTask',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.celerytask',),
        ),
        migrations.CreateModel(
            name='CreativeWork',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.abstractcreativework',),
        ),
        migrations.CreateModel(
            name='CreativeWorkVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.abstractcreativeworkversion',),
        ),
        migrations.CreateModel(
            name='WorkRelation',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.abstractworkrelation',),
        ),
        migrations.CreateModel(
            name='WorkRelationVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.abstractworkrelationversion',),
        ),
        migrations.AlterUniqueTogether(
            name='throughtags',
            unique_together=set([('tag', 'creative_work')]),
        ),
        migrations.AlterUniqueTogether(
            name='throughsubjects',
            unique_together=set([('subject', 'creative_work')]),
        ),
        migrations.AlterUniqueTogether(
            name='throughcontributor',
            unique_together=set([('subject', 'related')]),
        ),
        migrations.AlterUniqueTogether(
            name='throughawards',
            unique_together=set([('funder', 'award')]),
        ),
        migrations.AddField(
            model_name='rawdata',
            name='tasks',
            field=models.ManyToManyField(to='share.CeleryProviderTask'),
        ),
        migrations.AddField(
            model_name='normalizeddata',
            name='tasks',
            field=models.ManyToManyField(to='share.CeleryProviderTask'),
        ),
        migrations.AlterIndexTogether(
            name='celerytask',
            index_together=set([('type', 'name', 'app_label', 'timestamp')]),
        ),
        migrations.AlterUniqueTogether(
            name='abstractworkrelation',
            unique_together=set([('subject', 'related', 'type')]),
        ),
        migrations.AlterUniqueTogether(
            name='abstractagentworkrelation',
            unique_together=set([('agent', 'creative_work', 'type')]),
        ),
        migrations.AlterIndexTogether(
            name='abstractagentversion',
            index_together=set([('type', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='abstractagentrelation',
            unique_together=set([('subject', 'related', 'type')]),
        ),
        migrations.AlterIndexTogether(
            name='abstractagent',
            index_together=set([('type', 'name')]),
        ),
        migrations.CreateModel(
            name='Cites',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelation',),
        ),
        migrations.CreateModel(
            name='CitesVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelationversion',),
        ),
        migrations.CreateModel(
            name='Compiles',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelation',),
        ),
        migrations.CreateModel(
            name='CompilesVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelationversion',),
        ),
        migrations.CreateModel(
            name='Contributor',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.agentworkrelation',),
        ),
        migrations.CreateModel(
            name='ContributorVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.agentworkrelationversion',),
        ),
        migrations.CreateModel(
            name='Corrects',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelation',),
        ),
        migrations.CreateModel(
            name='CorrectsVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelationversion',),
        ),
        migrations.CreateModel(
            name='DataSet',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.creativework',),
        ),
        migrations.CreateModel(
            name='DataSetVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.creativeworkversion',),
        ),
        migrations.CreateModel(
            name='Discusses',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelation',),
        ),
        migrations.CreateModel(
            name='DiscussesVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelationversion',),
        ),
        migrations.CreateModel(
            name='Disputes',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelation',),
        ),
        migrations.CreateModel(
            name='DisputesVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelationversion',),
        ),
        migrations.CreateModel(
            name='Documents',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelation',),
        ),
        migrations.CreateModel(
            name='DocumentsVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelationversion',),
        ),
        migrations.CreateModel(
            name='Extends',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelation',),
        ),
        migrations.CreateModel(
            name='ExtendsVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelationversion',),
        ),
        migrations.CreateModel(
            name='Funder',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.agentworkrelation',),
        ),
        migrations.CreateModel(
            name='FunderVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.agentworkrelationversion',),
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.agentworkrelation',),
        ),
        migrations.CreateModel(
            name='HostVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.agentworkrelationversion',),
        ),
        migrations.CreateModel(
            name='IsAffiliatedWith',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.agentrelation',),
        ),
        migrations.CreateModel(
            name='IsAffiliatedWithVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.agentrelationversion',),
        ),
        migrations.CreateModel(
            name='IsDerivedFrom',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelation',),
        ),
        migrations.CreateModel(
            name='IsDerivedFromVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelationversion',),
        ),
        migrations.CreateModel(
            name='IsPartOf',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelation',),
        ),
        migrations.CreateModel(
            name='IsPartOfVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelationversion',),
        ),
        migrations.CreateModel(
            name='IsSupplementTo',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelation',),
        ),
        migrations.CreateModel(
            name='IsSupplementToVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelationversion',),
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.agent',),
        ),
        migrations.CreateModel(
            name='OrganizationVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.agentversion',),
        ),
        migrations.CreateModel(
            name='Patent',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.creativework',),
        ),
        migrations.CreateModel(
            name='PatentVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.creativeworkversion',),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.agent',),
        ),
        migrations.CreateModel(
            name='PersonVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.agentversion',),
        ),
        migrations.CreateModel(
            name='Poster',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.creativework',),
        ),
        migrations.CreateModel(
            name='PosterVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.creativeworkversion',),
        ),
        migrations.CreateModel(
            name='Presentation',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.creativework',),
        ),
        migrations.CreateModel(
            name='PresentationVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.creativeworkversion',),
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.creativework',),
        ),
        migrations.CreateModel(
            name='PublicationVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.creativeworkversion',),
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.agentworkrelation',),
        ),
        migrations.CreateModel(
            name='PublisherVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.agentworkrelationversion',),
        ),
        migrations.CreateModel(
            name='References',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelation',),
        ),
        migrations.CreateModel(
            name='ReferencesVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelationversion',),
        ),
        migrations.CreateModel(
            name='RepliesTo',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelation',),
        ),
        migrations.CreateModel(
            name='RepliesToVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelationversion',),
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.creativework',),
        ),
        migrations.CreateModel(
            name='RepositoryVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.creativeworkversion',),
        ),
        migrations.CreateModel(
            name='Retraction',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.creativework',),
        ),
        migrations.CreateModel(
            name='RetractionVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.creativeworkversion',),
        ),
        migrations.CreateModel(
            name='Retracts',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelation',),
        ),
        migrations.CreateModel(
            name='RetractsVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelationversion',),
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelation',),
        ),
        migrations.CreateModel(
            name='ReviewsVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.workrelationversion',),
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.creativework',),
        ),
        migrations.CreateModel(
            name='SoftwareVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.creativeworkversion',),
        ),
        migrations.AlterUniqueTogether(
            name='rawdata',
            unique_together=set([('provider_doc_id', 'app_label', 'source', 'sha256')]),
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publication',),
        ),
        migrations.CreateModel(
            name='ArticleVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publicationversion',),
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publication',),
        ),
        migrations.CreateModel(
            name='BookVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publicationversion',),
        ),
        migrations.CreateModel(
            name='ConferencePaper',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publication',),
        ),
        migrations.CreateModel(
            name='ConferencePaperVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publicationversion',),
        ),
        migrations.CreateModel(
            name='Consortium',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.organization',),
        ),
        migrations.CreateModel(
            name='ConsortiumVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.organizationversion',),
        ),
        migrations.CreateModel(
            name='Creator',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.contributor',),
        ),
        migrations.CreateModel(
            name='CreatorVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.contributorversion',),
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.organization',),
        ),
        migrations.CreateModel(
            name='DepartmentVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.organizationversion',),
        ),
        migrations.CreateModel(
            name='Dissertation',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publication',),
        ),
        migrations.CreateModel(
            name='DissertationVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publicationversion',),
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.organization',),
        ),
        migrations.CreateModel(
            name='InstitutionVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.organizationversion',),
        ),
        migrations.CreateModel(
            name='IsEmployedBy',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.isaffiliatedwith',),
        ),
        migrations.CreateModel(
            name='IsEmployedByVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.isaffiliatedwithversion',),
        ),
        migrations.CreateModel(
            name='IsMemberOf',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.isaffiliatedwith',),
        ),
        migrations.CreateModel(
            name='IsMemberOfVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.isaffiliatedwithversion',),
        ),
        migrations.CreateModel(
            name='Preprint',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publication',),
        ),
        migrations.CreateModel(
            name='PreprintVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publicationversion',),
        ),
        migrations.CreateModel(
            name='PrincipalInvestigator',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.contributor',),
        ),
        migrations.CreateModel(
            name='PrincipalInvestigatorVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.contributorversion',),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publication',),
        ),
        migrations.CreateModel(
            name='ProjectVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publicationversion',),
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publication',),
        ),
        migrations.CreateModel(
            name='RegistrationVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publicationversion',),
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publication',),
        ),
        migrations.CreateModel(
            name='ReportVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publicationversion',),
        ),
        migrations.CreateModel(
            name='Thesis',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publication',),
        ),
        migrations.CreateModel(
            name='ThesisVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publicationversion',),
        ),
        migrations.CreateModel(
            name='WorkingPaper',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publication',),
        ),
        migrations.CreateModel(
            name='WorkingPaperVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.publicationversion',),
        ),
        migrations.CreateModel(
            name='PrincipalInvestigatorContact',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.principalinvestigator',),
        ),
        migrations.CreateModel(
            name='PrincipalInvestigatorContactVersion',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('share.principalinvestigatorversion',),
        ),
        migrations.RunPython(create_share_robot_user),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_extradata_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_extradataversion(persistent_id, action, change_id, data, date_created, date_modified, same_as_id, same_as_version_id) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.data, NEW.date_created, NEW.date_modified, NEW.same_as_id, NEW.same_as_version_id) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_extradata_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_extradata_change ON share_extradata;\n\n        CREATE TRIGGER share_extradata_change\n        BEFORE INSERT OR UPDATE ON share_extradata\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_extradata_change();',
            reverse_sql='DROP TRIGGER share_extradata_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_tag_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_tagversion(persistent_id, action, change_id, date_created, date_modified, extra_id, extra_version_id, name, same_as_id, same_as_version_id) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.name, NEW.same_as_id, NEW.same_as_version_id) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_tag_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_tag_change ON share_tag;\n\n        CREATE TRIGGER share_tag_change\n        BEFORE INSERT OR UPDATE ON share_tag\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_tag_change();',
            reverse_sql='DROP TRIGGER share_tag_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_throughtags_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_throughtagsversion(persistent_id, action, change_id, creative_work_id, creative_work_version_id, date_created, date_modified, extra_id, extra_version_id, same_as_id, same_as_version_id, tag_id, tag_version_id) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.creative_work_id, NEW.creative_work_version_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.tag_id, NEW.tag_version_id) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_throughtags_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_throughtags_change ON share_throughtags;\n\n        CREATE TRIGGER share_throughtags_change\n        BEFORE INSERT OR UPDATE ON share_throughtags\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_throughtags_change();',
            reverse_sql='DROP TRIGGER share_throughtags_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_throughsubjects_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_throughsubjectsversion(persistent_id, action, change_id, creative_work_id, creative_work_version_id, date_created, date_modified, extra_id, extra_version_id, same_as_id, same_as_version_id, subject_id) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.creative_work_id, NEW.creative_work_version_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.subject_id) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_throughsubjects_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_throughsubjects_change ON share_throughsubjects;\n\n        CREATE TRIGGER share_throughsubjects_change\n        BEFORE INSERT OR UPDATE ON share_throughsubjects\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_throughsubjects_change();',
            reverse_sql='DROP TRIGGER share_throughsubjects_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_agent_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_agentversion(persistent_id, action, additional_name, change_id, date_created, date_modified, extra_id, extra_version_id, family_name, given_name, location, name, same_as_id, same_as_version_id, suffix, type) VALUES (NEW.id, TG_OP, NEW.additional_name, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.family_name, NEW.given_name, NEW.location, NEW.name, NEW.same_as_id, NEW.same_as_version_id, NEW.suffix, NEW.type) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_agent_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_agent_change ON share_agent;\n\n        CREATE TRIGGER share_agent_change\n        BEFORE INSERT OR UPDATE ON share_agent\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_agent_change();',
            reverse_sql='DROP TRIGGER share_agent_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_creativework_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_creativeworkversion(persistent_id, action, change_id, date_created, date_modified, date_published, date_updated, description, extra_id, extra_version_id, free_to_read_date, free_to_read_type, is_deleted, justification, language, registration_type, rights, same_as_id, same_as_version_id, title, type, withdrawn) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.date_published, NEW.date_updated, NEW.description, NEW.extra_id, NEW.extra_version_id, NEW.free_to_read_date, NEW.free_to_read_type, NEW.is_deleted, NEW.justification, NEW.language, NEW.registration_type, NEW.rights, NEW.same_as_id, NEW.same_as_version_id, NEW.title, NEW.type, NEW.withdrawn) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_creativework_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_creativework_change ON share_creativework;\n\n        CREATE TRIGGER share_creativework_change\n        BEFORE INSERT OR UPDATE ON share_creativework\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_creativework_change();',
            reverse_sql='DROP TRIGGER share_creativework_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_workidentifier_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_workidentifierversion(persistent_id, action, change_id, creative_work_id, creative_work_version_id, date_created, date_modified, extra_id, extra_version_id, host, same_as_id, same_as_version_id, scheme, uri) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.creative_work_id, NEW.creative_work_version_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.host, NEW.same_as_id, NEW.same_as_version_id, NEW.scheme, NEW.uri) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_workidentifier_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_workidentifier_change ON share_workidentifier;\n\n        CREATE TRIGGER share_workidentifier_change\n        BEFORE INSERT OR UPDATE ON share_workidentifier\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_workidentifier_change();',
            reverse_sql='DROP TRIGGER share_workidentifier_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_agentidentifier_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_agentidentifierversion(persistent_id, action, agent_id, agent_version_id, change_id, date_created, date_modified, extra_id, extra_version_id, host, same_as_id, same_as_version_id, scheme, uri) VALUES (NEW.id, TG_OP, NEW.agent_id, NEW.agent_version_id, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.host, NEW.same_as_id, NEW.same_as_version_id, NEW.scheme, NEW.uri) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_agentidentifier_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_agentidentifier_change ON share_agentidentifier;\n\n        CREATE TRIGGER share_agentidentifier_change\n        BEFORE INSERT OR UPDATE ON share_agentidentifier\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_agentidentifier_change();',
            reverse_sql='DROP TRIGGER share_agentidentifier_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_agentworkrelation_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_agentworkrelationversion(persistent_id, action, agent_id, agent_version_id, change_id, cited_as, creative_work_id, creative_work_version_id, date_created, date_modified, extra_id, extra_version_id, order_cited, same_as_id, same_as_version_id, type) VALUES (NEW.id, TG_OP, NEW.agent_id, NEW.agent_version_id, NEW.change_id, NEW.cited_as, NEW.creative_work_id, NEW.creative_work_version_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.order_cited, NEW.same_as_id, NEW.same_as_version_id, NEW.type) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_agentworkrelation_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_agentworkrelation_change ON share_agentworkrelation;\n\n        CREATE TRIGGER share_agentworkrelation_change\n        BEFORE INSERT OR UPDATE ON share_agentworkrelation\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_agentworkrelation_change();',
            reverse_sql='DROP TRIGGER share_agentworkrelation_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_throughcontributor_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_throughcontributorversion(persistent_id, action, change_id, date_created, date_modified, extra_id, extra_version_id, related_id, related_version_id, same_as_id, same_as_version_id, subject_id, subject_version_id) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.related_id, NEW.related_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.subject_id, NEW.subject_version_id) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_throughcontributor_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_throughcontributor_change ON share_throughcontributor;\n\n        CREATE TRIGGER share_throughcontributor_change\n        BEFORE INSERT OR UPDATE ON share_throughcontributor\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_throughcontributor_change();',
            reverse_sql='DROP TRIGGER share_throughcontributor_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_award_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_awardversion(persistent_id, action, award_amount, change_id, date, date_created, date_modified, description, extra_id, extra_version_id, name, same_as_id, same_as_version_id, uri) VALUES (NEW.id, TG_OP, NEW.award_amount, NEW.change_id, NEW.date, NEW.date_created, NEW.date_modified, NEW.description, NEW.extra_id, NEW.extra_version_id, NEW.name, NEW.same_as_id, NEW.same_as_version_id, NEW.uri) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_award_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_award_change ON share_award;\n\n        CREATE TRIGGER share_award_change\n        BEFORE INSERT OR UPDATE ON share_award\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_award_change();',
            reverse_sql='DROP TRIGGER share_award_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_throughawards_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_throughawardsversion(persistent_id, action, award_id, award_version_id, change_id, date_created, date_modified, extra_id, extra_version_id, funder_id, funder_version_id, same_as_id, same_as_version_id) VALUES (NEW.id, TG_OP, NEW.award_id, NEW.award_version_id, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.funder_id, NEW.funder_version_id, NEW.same_as_id, NEW.same_as_version_id) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_throughawards_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_throughawards_change ON share_throughawards;\n\n        CREATE TRIGGER share_throughawards_change\n        BEFORE INSERT OR UPDATE ON share_throughawards\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_throughawards_change();',
            reverse_sql='DROP TRIGGER share_throughawards_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_workrelation_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_workrelationversion(persistent_id, action, change_id, date_created, date_modified, extra_id, extra_version_id, related_id, related_version_id, same_as_id, same_as_version_id, subject_id, subject_version_id, type) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.related_id, NEW.related_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.subject_id, NEW.subject_version_id, NEW.type) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_workrelation_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_workrelation_change ON share_workrelation;\n\n        CREATE TRIGGER share_workrelation_change\n        BEFORE INSERT OR UPDATE ON share_workrelation\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_workrelation_change();',
            reverse_sql='DROP TRIGGER share_workrelation_change',
        ),
        migrations.RunSQL(
            sql='CREATE OR REPLACE FUNCTION before_share_agentrelation_change() RETURNS trigger AS $$\n        DECLARE\n            vid INTEGER;\n        BEGIN\n            INSERT INTO share_agentrelationversion(persistent_id, action, change_id, date_created, date_modified, extra_id, extra_version_id, related_id, related_version_id, same_as_id, same_as_version_id, subject_id, subject_version_id, type) VALUES (NEW.id, TG_OP, NEW.change_id, NEW.date_created, NEW.date_modified, NEW.extra_id, NEW.extra_version_id, NEW.related_id, NEW.related_version_id, NEW.same_as_id, NEW.same_as_version_id, NEW.subject_id, NEW.subject_version_id, NEW.type) RETURNING (id) INTO vid;\n            NEW.version_id = vid;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;',
            reverse_sql='DROP FUNCTION before_share_agentrelation_change();',
        ),
        migrations.RunSQL(
            sql='DROP TRIGGER IF EXISTS share_agentrelation_change ON share_agentrelation;\n\n        CREATE TRIGGER share_agentrelation_change\n        BEFORE INSERT OR UPDATE ON share_agentrelation\n        FOR EACH ROW\n        EXECUTE PROCEDURE before_share_agentrelation_change();',
            reverse_sql='DROP TRIGGER share_agentrelation_change',
        ),
        migrations.RunSQL(
            sql='''
                CREATE OR REPLACE FUNCTION count_estimate(query text) RETURNS INTEGER AS
                $func$
                DECLARE
                    rec   record;
                    ROWS  INTEGER;
                BEGIN
                    FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
                        ROWS := SUBSTRING(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
                        EXIT WHEN ROWS IS NOT NULL;
                    END LOOP;

                    RETURN ROWS - 1;
                END
                $func$ LANGUAGE plpgsql;
            ''',
            reverse_sql='DROP FUNCTION count_estimate();',
        ),
    ]
