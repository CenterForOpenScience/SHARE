rdf
---


decide/create rdf-based core metadata application profile
("osf-map"?) allowing for additional future terms/vocabularies

build a formatter that converts from sharev2's normalizeddata to
the given osf-map vocabulary, and serializes with rdflib
=> use that as the new input format for metadata formatters
   (instead of normalizeddata)

replace share.utils.graph.MutableGraph with rdflib.Graph
(or make it use rdflib.Graph internally)
(or use it to write reformatter for existing data, compat layer for existing transformers)

add converter from sharev2_normalizeddata to osf/rdf

update metadata formatters to take osf/rdf graph as input

=======

existing ingest flow
  share:RawDatum -> [Transform] -> [Regulate] -> share:MutableGraph -> [Format] -> Set<share:FormattedMetadataRecord>

desired ingest flow:
  share:RawDatum -> [Parse] -> rdflib:Resource () -> [Format] -> Set<share:FormattedMetadataRecord>



=======
from sharev2:normalizeddata to rdflib-parsable json-ld
- load json
- give the "central node" a non-blank @id
- add "@context": "https://share.osf.io/vocab/"


=======
plan as of 2022-11-18

redefine "share:normalize" to output a set of pid-centered rdf graphs
(with a shim to fill the gap with existing "transformers" which output
a single rdf graph with all explicitly blank ids)

store pid-centered rdf graphs as `FormattedMetadataRecord(record_format='turtle')`

add KnownPid model
- suid identifies a metadata record in a specific source repository,
  pid identifies what that record is focused on
- add suid.focal_pid_set

html "browse" view by pid
- maybe 'html' metadata format? maybe turtle-to-html renderer?
- given pid, get/render FMRs (via intermediate suid), choose format by content negotiation
- link any other referenced pids to their browse view

maybe start storing rdfs/owl/shacl vocabularies/terms as turtle-formatted FMR?

index records by their referenced uris:
- "central" pid
- any related pid
- rdf predicate uri
- rdf namespace/vocabulary/prefix uri

add "known vocabularies" to aid crosswalks

add MessageType.DELETE_SUID, get rid of the "format as deleted" thing

====
2022-11-21

TODO
- KnownPid data migration
- fill focal_pid_set on ingest
- focal_pid_set backfill task
- browse-pid interlink
- system-load vocabulary pids (rdfs/owl)
- focal-pid authorization by source domain
- pid-keyword search index
- recognize Source.home_page as pid for source info
- rdf-based oai_dc formatter
- rdf-based sharev2_elastic formatter

DONE
- browse-pid load turtle
- KnownPid migration
